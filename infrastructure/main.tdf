module "vpc" {
  source = "terraform-aws-modules/vpc/aws"

  name = "terra"
  cidr = "10.0.0.0/16"

  azs             = ["us-east-1a", "us-east-1b"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
  public_subnets  = ["10.0.3.0/24", "10.0.4.0/24"]

  enable_nat_gateway   = true
  single_nat_gateway   = true
  enable_dns_hostnames = true

  tags = {
    Terraform   = "true"
    Environment = "dev"
  }
}

resource "aws_subnet" "example" {
  vpc_id            = module.vpc.vpc_id
  cidr_block        = "10.0.0.0/24"
  map_public_ip_on_launch = true
  
  tags = {
    Name = "example-subnet"
  }
}

# Create a security group
resource "aws_security_group" "allow_ssh" {
  vpc_id            = module.vpc.vpc_id
  
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}


# Create an EC2 instance
resource "aws_instance" "web" {
  ami           = "ami-0e86e20dae9224db8" # Amazon Linux 2 AMI ID
  instance_type = "t3.micro"
  subnet_id     = aws_subnet.example.id
  key_name      = var.public_key
  security_groups = [aws_security_group.allow_ssh.id] # or use `vpc_security_group_ids`

  user_data = <<-EOF
              #!/bin/bash
              sudo apt-get update

              # Install unzip and curl if not already installed
              sudo apt-get install -y unzip curl

              # Download the AWS CLI zip file
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"

              # Unzip the installer
              unzip awscliv2.zip

              # Run the installer
              sudo ./aws/install

              # Verify installation
              aws --version
              EOF

  tags = {
    Name = "Terraform-Example"
  }
}





/*data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_instance" "web" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t3.micro"

  tags = {
    Name = "HelloWorld"
  }
  user_data = templatefile("./modules/aws/install_aws.sh", {})
}


module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "~> 20.0"

  cluster_name    = "terraeks"
  cluster_version = "1.30"

  cluster_endpoint_public_access = true



  vpc_id     = module.vpc.vpc_id
  subnet_ids = module.vpc.private_subnets 

  eks_managed_node_group_defaults = {
    ami_type       = "AL2_x86_64"
  }

  eks_managed_node_groups = {
    node1 = {
      instance_types = ["t2.xlarge"]

      min_size     = 1
      max_size     = 2
      desired_size = 2
    }


    node2 = {
      instance_types = ["t2.xlarge"]

      min_size     = 1
      max_size     = 2
      desired_size = 2
    }
  }

  enable_cluster_creator_admin_permissions = true


}*/

/*module "vpc" {
    source               = "./modules/vpc"
    vpc_cidr             = var.vpc_cidr
    vpc_name             = var.vpc_name
    cidr_public_subnet   = var.cidr_public_subnet
    availability_zone = var.availability_zone
    cidr_private_subnet  = var.cidr_private_subnet
}

module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "~> 20.0"

  cluster_name    = "capstonewithjenkins"
  cluster_version = "1.30"

  cluster_endpoint_public_access = true



  vpc_id     = module.vpc.capstoneWithJenkins_vpc_id
  subnet_ids = module.vpc.capstoneWithJenkins_private_subnets

  eks_managed_node_group_defaults = {
    ami_type       = "AL2_x86_64"
  }

  eks_managed_node_groups = {
    node1 = {
      instance_types = ["t2.xlarge"]

      min_size     = 1
      max_size     = 2
      desired_size = 2
    }


    node2 = {
      instance_types = ["t2.xlarge"]

      min_size     = 1
      max_size     = 2
      desired_size = 2
    }
  }

  enable_cluster_creator_admin_permissions = true


}*/